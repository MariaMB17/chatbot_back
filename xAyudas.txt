    // Agrupa y cuenta por Item
      //   const groupedData = await this.prismaService.memberLog.groupBy({
      //     by: ['item'],
      //     _sum: {
      //       counter: true
      //     },
      //     where: {
      //       member: {
      //         is: { id: member_id }
      //       }
      //     }
      //   }
      //   )
      //   console.log(groupedData);


Funcion upload Knowledge - Original:
----------------------------------------------------------------------------------------
 @UseFilters(AllExceptionFilter)
  async upload(id: string, files: Express.Multer.File[]): Promise<(KnowledgeBase & { knowledgeFile: KnowledgeFile })[]> {

    const optionsCloudinary: UploadApiOptions = {
      resource_type: 'raw',
      folder: 'ia-chatbot',
      public_id: '',
    };

    const downloadFormData = (urlStr, callback) => {
      const parsedUrl = parse(urlStr);
      const lib = parsedUrl.protocol === 'https:' ? https : http;
      lib.get(urlStr, function (res) {
        const data = [];
        res
          .on('data', function (chunk) {
            data.push(chunk);
          })
          .on('end', function () {
            callback(Buffer.concat(data));
          });
      });
    };

    const uploadPromises = files.map(async (file) => {
      const { originalname, mimetype, buffer } = file;
      const objetoBase = {
        originalname,
        mimetype,
        textContent: '',
        knowledge_id: id
      };

      optionsCloudinary.public_id = originalname;
      const responseFile: UploadApiResponse = await new Promise(
        (resolve, reject) => {
          cloudinary.uploader
            .upload_stream(optionsCloudinary, (error, result) => {
              if (error) {
                reject(error);
                return;
              }
              resolve(result);
            })
            .end(buffer);
        },
      );

      const { asset_id, public_id, secure_url } = responseFile;

      const objetoFile = {
        asset_id,
        public_id,
        secure_url,
        knowledgeBase_id: ''
      };

      const textContext: string = await new Promise(
        (resolve, reject) => {
          downloadFormData(secure_url, function (data) {
            if (data) {
              textract.fromBufferWithMime(mimetype, data,
                function (error, text) {
                  if (error) {
                    reject(error);
                  } else {
                    resolve(text);
                  }
                })
            }
          });
        },
      );

      objetoBase.textContent = textContext;
      const objetoData = {
        base: objetoBase,
        file: objetoFile
      }
      return objetoData;
    });
    const allObjetoData = await Promise.all(uploadPromises);

    const knowledgeBaseAndFilePromises = allObjetoData.map(async objetoData => {
      const knowledgeBase = await this.prismaService.knowledgeBase.create({
        data: { ...objetoData.base }
      });

      const knowledgeFile = await this.prismaService.knowledgeFile.create({
        data: {
          ...objetoData.file,
          knowledgeBase_id: knowledgeBase.id
        }
      });

      return {
        ...knowledgeBase,
        knowledgeFile
      };
    });
    return Promise.all(knowledgeBaseAndFilePromises);
  }
  ---------------------------------------------------------------------------------------------