generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Member    Member?
  Profile   Profile?

  @@map("users")
}

model Profile {
  id         Int      @id @default(autoincrement())
  userId     Int?     @unique
  firstname  String
  lastname   String
  mobilphone String?
  address    String
  age        Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Company {
  id          Int      @id @default(autoincrement())
  rif         String
  name        String
  addres      String
  numberphone String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  member      Member[]

  @@map("companies")
}

model Member {
  id        Int      @id @default(autoincrement())
  companyId Int
  userId    Int      @unique
  planId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan?    @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("members")
}

model Plan {
  id          Int      @id @default(autoincrement())
  description String
  cost        Decimal  @db.Decimal(10, 2)
  days        Int
  invoice     Invoice?
  member      Member?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("plans")
}

model Invoice {
  id                     Int                      @id @default(autoincrement())
  fecha                  DateTime
  number                 String                   @unique
  total                  Decimal                  @db.Decimal(10, 2)
  plan                   Plan                     @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  planId                 Int                      @unique
  PaymentMethodOnInvoice PaymentMethodOnInvoice[]
  companyId              Int
  currency               Currency                 @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId             Int                      @unique
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  @@map("invoices")
}

model Currency {
  id                 Int                  @id @default(autoincrement())
  code               String               @unique
  description        String
  symbol             String               @unique
  invoice            Invoice?
  associatedCurrency AssociatedCurrency[]
  exchangeRate       ExchangeRate?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("currencies")
}

model PaymentMethod {
  id          Int                      @id @default(autoincrement())
  description String
  invoice     PaymentMethodOnInvoice[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  @@map("paymentMethods")
}

model PaymentMethodOnInvoice {
  id              Int            @id @default(autoincrement())
  invoice         Invoice        @relation(fields: [invoiceId], references: [id])
  invoiceId       Int
  PaymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int            @unique
  expirationDate  DateTime
  bank            String
  date            DateTime       @default(now())
  amount          Decimal        @db.Decimal(10, 2)
  numReference    String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("paymentMethodsOnInvoices")
}

model AssociatedCurrency {
  id           Int           @id @default(autoincrement())
  description  String
  currency     Currency      @relation(fields: [currencyId], references: [id])
  currencyId   Int
  exchangeRate ExchangeRate?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("associatedCurrencies")
}

model ExchangeRate {
  id                 Int                @id @default(autoincrement())
  description        String
  currencybase       Currency           @relation(fields: [currencyIdbaseId], references: [id])
  currencyIdbaseId   Int                @unique
  foreigncurrency    AssociatedCurrency @relation(fields: [foreigncurrencyId], references: [id])
  foreigncurrencyId  Int                @unique
  mountCurrencyBse   Decimal            @db.Decimal(10, 2)
  currencyconversion Decimal            @db.Decimal(10, 2)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("exchangeRates")
}
