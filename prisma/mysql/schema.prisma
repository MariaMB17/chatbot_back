generator client {
  provider = "prisma-client-js"
  output   = "/node_modules/@prisma/mysql/client"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

model KnowledgeOnBot {
  bot          Bot       @relation(fields: [bot_id], references: [id])
  bot_id       Int
  knowledge    Knowledge @relation(fields: [knowledge_id], references: [id])
  knowledge_id Int
  @@id([bot_id,knowledge_id])
  @@map("knowledgenbots")
}

model Bot {
  id             Int               @id @default(autoincrement())
  name           String
  description    String
  modelgpt       String
  personality    String?
  nickname       String
  memberOnBot    MemberOnBot[]
  knowledgeOnBot KnowledgeOnBot[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  @@map("bots")
}

model MemberOnBot {
  id        Int     @id @default(autoincrement())
  member    Member @relation(fields: [member_id], references: [id])
  member_id Int
  bot       Bot    @relation(fields: [bot_id], references: [id])
  bot_id    Int
  @@map("memberonbots")
}

model MemberOnKnowledge {
  id           Int        @id @default(autoincrement())
  member       Member    @relation(fields: [member_id], references: [id])
  member_id    Int
  knowledge    Knowledge @relation(fields: [knowledge_id], references: [id])
  knowledge_id Int
  @@map("memberonknowledges")
}

// Item = ('Credit', 'Document', 'Bot', 'Member')
model MemberLog {
  id        Int       @id @default(autoincrement())
  item      String
  counter   Int
  member    Member   @relation(fields: [member_id], references: [id])
  member_id Int
  createdAt DateTime  @default(now())
  @@map("memberlogs")
}

model Member {
  id                Int                  @id @default(autoincrement())
  user              User?               @relation(fields: [userId], references: [id])
  userId            Int                  @unique
  company           Company             @relation(fields: [companyId], references: [id])
  companyId         Int
  plan              Plan                @relation(fields: [planId], references: [id])
  planId            Int
  memberOnKnowledge MemberOnKnowledge[]
  memberOnBot       MemberOnBot[]
  memberLog         MemberLog[]
  role              String               @default("ADMIN")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  @@map("members")
}
// model Member {
//   id        Int       @id @default(autoincrement())
//   companyId Int
//   userId    Int       @unique
//   planId    Int       @unique
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
//   user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   plan      Plan?    @relation(fields: [planId], references: [id], onDelete: Cascade)

//   @@map("members")
// }
model Knowledge {
  id                Int                  @id @default(autoincrement())
  description       String
  knowledgeBase     KnowledgeBase[]
  memberOnKnowledge MemberOnKnowledge[]
  knowledgeOnBot    KnowledgeOnBot[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  @@map("knowledges")
}

model KnowledgeBase {
  id            Int              @id @default(autoincrement())
  originalname  String
  mimetype      String
  textContent   String           @db.LongText
  knowledge     Knowledge       @relation(fields: [knowledge_id], references: [id],onDelete: Cascade)
  knowledge_id  Int
  knowledgeFile KnowledgeFile[]
  createdAt     DateTime         @default(now())
  @@map("knowledgebases")
}

model KnowledgeFile {
  id               Int            @id @default(autoincrement())
  asset_id         String
  public_id        String
  secure_url       String
  knowledgeBase    KnowledgeBase @relation(fields: [knowledgeBase_id], references: [id], onDelete: Cascade)
  knowledgeBase_id Int
  @@map("knowledgefiles")
}
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Member    Member?
  Profile   Profile?

  @@map("users")
}

model Profile {
  id         Int       @id @default(autoincrement())
  userId     Int?      @unique
  firstname  String
  lastname   String
  mobilphone String?
  address    String
  age        Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Company {
  id          Int       @id @default(autoincrement())
  rif         String
  name        String
  addres      String
  numberphone String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  member      Member[]

  @@map("companies")
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  cost        Decimal   @db.Decimal(10, 2)
  credits     Int
  bots        Int
  documents   Int
  members     Int
  invoice     Invoice?
  member      Member[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@map("plans")
}

// model Plan {
//   id          Int       @id @default(autoincrement())
//   description String
//   cost        Decimal   @db.Decimal(10, 2)
//   days        Int
//   invoice     Invoice?
//   member      Member?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   @@map("plans")
// }

model Invoice {
  id                     Int                       @id @default(autoincrement())
  fecha                  DateTime
  number                 String                    @unique
  total                  Decimal                   @db.Decimal(10, 2)
  plan                   Plan                     @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  planId                 Int                       @unique
  PaymentMethodOnInvoice PaymentMethodOnInvoice[]
  companyId              String
  currency               Currency                 @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId             Int                       @unique
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt

  @@map("invoices")
}

model Currency {
  id                 Int                   @id @default(autoincrement())
  code               String
  description        String
  symbol             String
  invoice            Invoice?
  associatedCurrency AssociatedCurrency[]
  exchangeRate       ExchangeRate?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@map("currencies")
}

model PaymentMethod {
  id          Int                       @id @default(autoincrement())
  description String
  invoice     PaymentMethodOnInvoice[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  @@map("paymentMethods")
}

model PaymentMethodOnInvoice {
  id              Int             @id @default(autoincrement())
  invoice         Invoice        @relation(fields: [invoiceId], references: [id])
  invoiceId       Int
  PaymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int             @unique
  expirationDate  DateTime
  bank            String
  date            DateTime        @default(now())
  amount          Decimal         @db.Decimal(10, 2)
  numReference    String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("paymentMethodsOnInvoices")
}

model AssociatedCurrency {
  id           Int            @id @default(autoincrement())
  description  String
  currency     Currency      @relation(fields: [currencyId], references: [id])
  currencyId   Int
  exchangeRate ExchangeRate?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("associatedCurrencies")
}

model ExchangeRate {
  id                 Int                 @id @default(autoincrement())
  description        String
  currencybase       Currency           @relation(fields: [currencyIdbase], references: [id])
  currencyIdbase     Int                 @unique
  foreigncurrency    AssociatedCurrency @relation(fields: [foreigncurrencyId], references: [id])
  foreigncurrencyId  Int                 @unique
  mountCurrencyBse   Decimal             @db.Decimal(10, 2)
  currencyconversion Decimal             @db.Decimal(10, 2)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("exchangeRates")
}